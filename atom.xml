<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stark_Ye&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/3316b95b45d5bfa9a4e4e3dd10ad1622</icon>
  <subtitle>还没想好。。</subtitle>
  <link href="http://starkye.com/atom.xml" rel="self"/>
  
  <link href="http://starkye.com/"/>
  <updated>2023-02-02T10:16:12.883Z</updated>
  <id>http://starkye.com/</id>
  
  <author>
    <name>Stark_Ye</name>
    <email>yehanchen714@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://starkye.com/posts/0.html"/>
    <id>http://starkye.com/posts/0.html</id>
    <published>2023-02-02T10:16:12.883Z</published>
    <updated>2023-02-02T10:16:12.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Leetcode977-有序数组的平方-Square-of-a-Sorted-Array"><a href="#Leetcode977-有序数组的平方-Square-of-a-Sorted-Array" class="headerlink" title="Leetcode977 有序数组的平方 Square of a Sorted Array"></a>Leetcode977 有序数组的平方 Square of a Sorted Array</h2><h3 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h3><ul><li>刚看到题想到的是暴力解法, 时间复杂度是O(nlogn)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;  </span><br><span class="line">            nums[i] *= nums[i];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());  </span><br><span class="line">        <span class="keyword">return</span> nums;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><ul><li>因为数组有负数, 所以负数的平方很可能比正数的平方大. 所以我们只要比对快慢指针的平方对比谁大就放进result的数组里.</li><li>时间复杂度O(n)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;  </span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>() - <span class="number">1</span>;  </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">result</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;  </span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = nums.<span class="built_in">size</span>() - <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j )&#123;  </span><br><span class="line">            <span class="keyword">if</span> ( (nums[i] * nums[i]) &gt; (nums[j] * nums[j]) )&#123;  </span><br><span class="line">                result[len--] = nums[i] * nums[i];  </span><br><span class="line">                i++;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                result[len--] = nums[j] * nums[j];  </span><br><span class="line">                j--;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Leetcode209-长度最小的子数组-Minimum-Size-Subarray-Sum"><a href="#Leetcode209-长度最小的子数组-Minimum-Size-Subarray-Sum" class="headerlink" title="Leetcode209 长度最小的子数组 Minimum Size Subarray Sum"></a>Leetcode209 长度最小的子数组 Minimum Size Subarray Sum</h2><h3 id="暴力解法-1"><a href="#暴力解法-1" class="headerlink" title="暴力解法"></a>暴力解法</h3><ul><li>时间复杂度O(n^2)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> s, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> result = INT32_MAX; <span class="comment">// 最终的结果</span></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>; <span class="comment">// 子序列的数值之和</span></span><br><span class="line">        <span class="type">int</span> subLength = <span class="number">0</span>; <span class="comment">// 子序列的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 设置子序列起点为i</span></span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; nums.<span class="built_in">size</span>(); j++) &#123; <span class="comment">// 设置子序列终止位置为j</span></span><br><span class="line">                sum += nums[j];</span><br><span class="line">                <span class="keyword">if</span> (sum &gt;= s) &#123; <span class="comment">// 一旦发现子序列和超过了s，更新result</span></span><br><span class="line">                    subLength = j - i + <span class="number">1</span>; <span class="comment">// 取子序列的长度</span></span><br><span class="line">                    result = result &lt; subLength ? result : subLength;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 因为我们是找符合条件最短的子序列，所以一旦符合条件就break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列</span></span><br><span class="line">        <span class="keyword">return</span> result == INT32_MAX ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><ul><li><p>滑动窗口是不断调节子序列的起始位置和终止位置.<br>*跟双指针很像, 但是滑动窗口的指针是在同一起点进行的. </p></li><li><p>窗口内是什么? ***窗口是满足其和≥s的长度最小的连续子数组</p></li><li><p>如何移动窗口的起始位置? ***如果当前值大于s,窗口就要向前移动</p></li><li><p>如何移动窗口的结束位置? ***窗口的结束位置就是遍历数组的指针</p></li></ul><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(sum &gt;= target)&#123;  </span><br><span class="line">    temp = i - j + <span class="number">1</span>; <span class="comment">//取子序列的长度</span></span><br><span class="line">    output = temp &lt; output ? temp : output; </span><br><span class="line">    sum -= nums[j++]; <span class="comment">//不断变更的j(子序列的起始位置)</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ul><li>时间复杂度: O(n)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;  </span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();  </span><br><span class="line">        <span class="type">int</span> temp = <span class="number">0</span>;  </span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;  </span><br><span class="line">        <span class="type">int</span> output = INT32_MAX;  </span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;  </span><br><span class="line">            sum += nums[i];  </span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target)&#123;  </span><br><span class="line">                temp = i - j + <span class="number">1</span>;  </span><br><span class="line">                output = temp &lt; output ? temp : output;  </span><br><span class="line">                sum -= nums[j++];  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> output == INT32_MAX ? <span class="number">0</span> : output;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Leetcode59-螺旋矩阵II-Spiral-Matrix-II"><a href="#Leetcode59-螺旋矩阵II-Spiral-Matrix-II" class="headerlink" title="Leetcode59 螺旋矩阵II Spiral Matrix II"></a>Leetcode59 螺旋矩阵II Spiral Matrix II</h2><h3 id="模拟过程"><a href="#模拟过程" class="headerlink" title="模拟过程"></a>模拟过程</h3><ul><li><p>首先要从左向右,从上到下,从右到左,从下到上. 模拟螺旋矩阵的样子.</p></li><li><p>循环不变量. 每一条先都要左闭右开.  处理从第一个节点到最后一个前一个(最后一个节点不处理,留给下一条边来处理)</p></li><li><p>转 <code>n/2</code> 圈 ,如果是奇数,最后多一个判断语句如果 <code>n/2</code> 是奇数,把数组最后一个数放在中间.</p></li><li><p><code>startx</code> 和 <code>starty</code> 定义每次循环的起始点.</p></li><li><p><code>offset</code> 需要控制每一条边遍历的长度,每次循环右边界收缩以为</p></li><li><p><code>for (j = starty; j &lt; n-offset; j++)</code><br>  - 循环开始,从左到右遍历,<code>j</code> 从循环 <code>starty</code> 起点到<code>n-offset</code> 收缩截止.<br>  - <code>nums[startx][j] = count++;</code></p></li><li><p><code>for (i = startx; i &lt; n-offset; i++)</code><br>  - 循环最后边,从上到下,从循环 <code>startx</code> 起点到<code>n-offset</code> 收缩截止.<br>  - 因为上一个for循环的<code>j</code> 停留在了最后一个,可以直接用.<br>  - <code>nums[i][j] = count++;</code></p></li><li><p><code>for (; j&gt;starty;j--)</code></p><ul><li>循环最下层,从右到左,不需要重新定义<code>j</code>的开始,到<code>j</code>到<code>starty</code>之前截止.</li><li><code>nums[i][j] = count++;</code></li></ul></li><li><p><code>for (; i &gt; startx; i--)</code></p><ul><li>循环最左层,从下到上,不需要重新定义<code>i</code>的开始,到<code>i</code>到<code>starti</code>之前截止.</li><li><code>nums[i][j] = count++;</code></li></ul></li><li><p>最后要把每次循环圈的起点增加,和<code>offset</code> 边界收缩增加</p><ul><li><code>//第二圈开始起始点x,y都加1</code><br>  <code>startx++;  </code><br>  <code>starty++;  </code><br>  <code>//offset 控制每一圈里每一条边遍历的长度  </code><br>  <code>offset++;</code>  &#96;</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;  </span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">nums</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>)); <span class="comment">//定义二维数组  </span></span><br><span class="line">        <span class="type">int</span> startx = <span class="number">0</span>, starty = <span class="number">0</span>; <span class="comment">//定义每次循环的起始点x,y  </span></span><br><span class="line">        <span class="type">int</span> offset = <span class="number">1</span>; <span class="comment">// 需要控制每一条边遍历的长度，每次循环右边界收缩一位  </span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>; <span class="comment">//矩阵里的数  </span></span><br><span class="line">        <span class="type">int</span> loop = n/<span class="number">2</span>; <span class="comment">// 举证循环几次,如果是奇数最后判定  </span></span><br><span class="line">        <span class="type">int</span> mid = n/<span class="number">2</span>; <span class="comment">//圈数奇数判定,中间的值nums[mid][mid]  </span></span><br><span class="line">        <span class="type">int</span> i,j;  </span><br><span class="line">        <span class="keyword">while</span> (loop--)&#123;  </span><br><span class="line">            <span class="keyword">for</span> (j = starty; j &lt; n-offset; j++)&#123;  </span><br><span class="line">                nums[startx][j] = count++;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">for</span> (i = startx; i &lt; n-offset; i++)&#123;  </span><br><span class="line">                nums[i][j] = count++;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">for</span> (; j&gt;starty;j--)&#123;  </span><br><span class="line">                nums[i][j] = count++;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">for</span> (; i &gt; startx; i--)&#123;  </span><br><span class="line">                nums[i][j] = count++;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">//第二圈开始起始点x,y都加1  </span></span><br><span class="line">            startx++;  </span><br><span class="line">            starty++;  </span><br><span class="line">            <span class="comment">//offset 控制每一圈里每一条边遍历的长度  </span></span><br><span class="line">            offset++;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//奇数,要单独给中间赋值  </span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>)&#123;  </span><br><span class="line">            nums[mid][mid] = count;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> nums;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Leetcode977-有序数组的平方-Square-of-a-Sorted-Array&quot;&gt;&lt;a href=&quot;#Leetcode977-有序数组的平方-Square-of-a-Sorted-Array&quot; class=&quot;headerlink&quot; title=&quot;Leet</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://starkye.com/posts/3eeb.html"/>
    <id>http://starkye.com/posts/3eeb.html</id>
    <published>2023-02-01T09:36:02.972Z</published>
    <updated>2023-02-01T09:36:03.607Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
